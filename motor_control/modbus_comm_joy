import rclpy
from rclpy.node import Node
from pymodbus.client import ModbusSerialClient as ModbusClient
from pymodbus.exceptions import ModbusException
from pymodbus.pdu import ExceptionResponse
import time
from geometry_msgs.msg import Twist
from sensor_msgs.msg import Joy

class ModbusNode(Node):
    def __init__(self):
        super().__init__('modbus_node')
        self.declare_parameter('port', '/dev/ttyUSB0')
        self.declare_parameter('baudrate', 9600)
        self.declare_parameter('timeout', 1)

        port = self.get_parameter('port').get_parameter_value().string_value
        baudrate = self.get_parameter('baudrate').get_parameter_value().integer_value
        timeout = self.get_parameter('timeout').get_parameter_value().double_value

        self.client = ModbusClient(
            port=port,
            baudrate=baudrate,
            timeout=timeout,
            parity='N',
            stopbits=1,
            bytesize=8
        )

        if not self.client.connect():
            self.get_logger().error('Failed to connect to the Modbus device.')
            return

        # Motor addresses
        self.motor_1_address = 1
        self.motor_2_address = 2

        # Jog velocity registers
        self.jog_velocity_register_high = 40343
        self.jog_velocity_register_low = 40344

        # Encoder feedback registers
        self.encoder_position_register_high = 40007
        self.encoder_position_register_low = 40008

        # Subscribe to joystick messages
        self.joystick_subscriber = self.create_subscription(
            Joy,
            'joy',
            self.joystick_callback,
            10
        )

        self.get_logger().info("Joystick teleoperation initialized.")

    def enable_motor(self, motor_address):
        self._write_register(40125, 159, motor_address)
        self.get_logger().info(f"Motor {motor_address} enabled successfully.")

    def disable_motor(self, motor_address):
        self._write_register(40125, 158, motor_address)
        self.get_logger().info(f"Motor {motor_address} disabled successfully.")

    def start_jog(self, motor_address):
        self._write_register(40125, 150, motor_address)
        self.get_logger().info(f"Motor {motor_address} jog started successfully.")

    def stop_jog(self, motor_address):
        self._write_register(40125, 216, motor_address)
        self.get_logger().info(f"Motor {motor_address} jog stopped successfully.")

    def set_jog_velocity(self, motor_address, velocity):
        if not (-24000 <= velocity <= 24000):
            self.get_logger().error(f"Jog velocity {velocity} is out of range. It must be between -24000 and 24000.")
            return

        # Convert velocity to a 32-bit signed integer
        if velocity < 0:
            velocity = (1 << 32) + velocity

        high_word = (velocity >> 16) & 0xFFFF
        low_word = velocity & 0xFFFF

        # Write the high and low words to the respective Modbus registers
        self._write_register(self.jog_velocity_register_high, high_word, motor_address)
        time.sleep(0.1)
        self._write_register(self.jog_velocity_register_low, low_word, motor_address)
        time.sleep(0.1)

        # Verify if the values were correctly written by reading them back
        written_high = self._read_register(self.jog_velocity_register_high, motor_address)
        written_low = self._read_register(self.jog_velocity_register_low, motor_address)

        if written_high == high_word and written_low == low_word:
            direction = "counterclockwise" if velocity & 0x80000000 else "clockwise"
            self.get_logger().info(f"Jog velocity for motor {motor_address} set to {velocity} (1/240 rps) in {direction} direction.")
        else:
            self.get_logger().error(f"Failed to set jog velocity for motor {motor_address}. Written values do not match.")

    def display_encoder_feedback(self, motor_address):
        high_word = self._read_register(self.encoder_position_register_high, motor_address)
        low_word = self._read_register(self.encoder_position_register_low, motor_address)

        if high_word is None or low_word is None:
            self.get_logger().error(f"Failed to get encoder position for motor {motor_address}")
            return

        # Combine the high and low words into a 32-bit signed integer
        encoder_position = (high_word << 16) | low_word
        if encoder_position & (1 << 31):  # If the sign bit is set
            encoder_position -= (1 << 32)

        self.get_logger().info(f"Encoder position for motor {motor_address}: {encoder_position}")

    def _write_register(self, address, value, motor_address):
        try:
            modbus_address = address - 40001  # Modbus address offset for holding registers
            result = self.client.write_register(modbus_address, value, slave=motor_address)
            if isinstance(result, ExceptionResponse):
                self.get_logger().error(f"Failed to write to register {address} for motor {motor_address}: {result}")
        except ModbusException as e:
            self.get_logger().error(f"Modbus Exception: {e}")

    def _read_register(self, address, motor_address):
        try:
            modbus_address = address - 40001  # Calculate Modbus address
            self.get_logger().debug(f"Reading Modbus address: {modbus_address} for motor {motor_address}")
            result = self.client.read_holding_registers(modbus_address, 1, slave=motor_address)
            if isinstance(result, ExceptionResponse) or not hasattr(result, 'registers'):
                self.get_logger().error(f"Failed to read from register {address} for motor {motor_address}: {result}")
                return None  # Return None if there's an error
            return result.registers[0]
        except ModbusException as e:
            self.get_logger().error(f"Modbus Exception while reading register {address} for motor {motor_address}: {e}")
            return None  # Return None if there's an exception

    def joystick_callback(self, msg):
        # Assume axes 1 and 0 for forward/backward and left/right movement
        # Adjust these indices based on your joystick mapping
        forward_backward = msg.axes[1]
        left_right = msg.axes[0]

        # Adjust these scaling factors based on your needs
        max_velocity = 24000
        scale_factor = 10000

        # Calculate velocities for each motor
        velocity_motor_1 = int(forward_backward * max_velocity * scale_factor)
        velocity_motor_2 = int(-left_right * max_velocity * scale_factor)

        # Set jog velocities for motors
        self.set_jog_velocity(self.motor_1_address, velocity_motor_1)
        self.set_jog_velocity(self.motor_2_address, velocity_motor_2)

def main(args=None):
    rclpy.init(args=args)
    node = ModbusNode()

    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        rclpy.shutdown()

if __name__ == '__main__':
    main()
